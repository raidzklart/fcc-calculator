{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","value","displayValue","operator","waitingForOperand","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","charAt","slice","concat","parseFloat","number","_this$state","append","indexOf","previous","operatorClicked","nextOperator","_this$state2","nextValue","computedValue","/","prevValue","*","-","+","=","String","_this2","react_default","a","createElement","className","id","onClick","clear","sign","percent","performOperation","dot","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAe,CACnBC,MAAO,KACPC,aAAc,GACdC,SAAU,KACVC,mBAAmB,IAEAC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQd,EAFIO,uEAMjBG,KAAKK,SAAS,CACZb,aAAc,oCAIsB,MAAtCQ,KAAKI,MAAMZ,aAAac,OAAO,GAAaN,KAAKK,SAAS,CAAEb,aAAcQ,KAAKI,MAAMZ,aAAae,MAAM,KAAQP,KAAKK,SAAS,CAAEb,aAAY,IAAAgB,OAAMR,KAAKI,MAAMZ,kDAG7JQ,KAAKK,SAAS,CAAEb,aAAY,GAAAgB,OAAKC,WAAWT,KAAKI,MAAMZ,cAAgB,sCAElEkB,GAAQ,IAAAC,EAC+BX,KAAKI,MAAzCZ,EADKmB,EACLnB,aADKmB,EACSjB,kBAEpBM,KAAKK,SAAS,CACZb,aAAckB,EACdhB,mBAAmB,IAGrBM,KAAKK,SAAS,CACZb,aAA+B,MAAjBA,EAAuBkB,EAASlB,EAAekB,kCAKnCV,KAAKI,MAA3BV,kBAIwB,KAA5BM,KAAKI,MAAMZ,aACbQ,KAAKY,OAAO,OAEqC,IAA1CZ,KAAKI,MAAMZ,aAAaqB,QAAQ,OACvCb,KAAKY,OAAO,KACZZ,KAAKK,SAAS,CAAEX,mBAAmB,2CAIrCM,KAAKK,SAAS,CACZS,SAAUd,KAAKI,MAAMZ,aACrBuB,iBAAiB,6CAIJC,GAAc,IAAAC,EACajB,KAAKI,MAAvCZ,EADqByB,EACrBzB,aAAcC,EADOwB,EACPxB,SAAUF,EADH0B,EACG1B,MAC1B2B,EAAYT,WAAWjB,GAU7B,GAAa,MAATD,EACFS,KAAKK,SAAS,CACZd,MAAO2B,SAEJ,GAAIzB,EAAU,CACnB,IACM0B,EAdW,CACjBC,IAAK,SAACC,EAAWH,GAAZ,OAA0BG,EAAYH,GAC3CI,IAAK,SAACD,EAAWH,GAAZ,OAA0BG,EAAYH,GAC3CK,IAAK,SAACF,EAAWH,GAAZ,OAA0BG,EAAYH,GAC3CM,IAAK,SAACH,EAAWH,GAAZ,OAA0BG,EAAYH,GAC3CO,IAAK,SAACJ,EAAWH,GAAZ,OAA0BA,IASEzB,GADZF,GAAS,EAC2B2B,GAEzDlB,KAAKK,SAAS,CACZd,MAAO4B,EACP3B,aAAckC,OAAOP,KAGzBnB,KAAKK,SAAS,CACZX,mBAAmB,EACnBD,SAAUuB,qCAGL,IAAAW,EAAA3B,KACP,OACE4B,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WAAuC,KAA5BhC,KAAKI,MAAMZ,aAAsB,EAAIQ,KAAKI,MAAMZ,cACnEoC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,GAAG,QAAQC,QAAS,WAAQN,EAAKO,UAA9D,KACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcE,QAAS,WAAQN,EAAKQ,SAAnD,OACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcE,QAAS,WAAQN,EAAKS,YAAnD,KACAR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,GAAG,SAASC,QAAS,WAAQN,EAAKU,iBAAiB,OAAjF,QACAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,QAAQC,QAAS,WAAQN,EAAKf,OAAO,OAA7D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,QAAQC,QAAS,WAAQN,EAAKf,OAAO,OAA7D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,OAAOC,QAAS,WAAQN,EAAKf,OAAO,OAA5D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,GAAG,WAAWC,QAAS,WAAQN,EAAKU,iBAAiB,OAAnF,KACAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,OAAOC,QAAS,WAAQN,EAAKf,OAAO,OAA5D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,OAAOC,QAAS,WAAQN,EAAKf,OAAO,OAA5D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,MAAMC,QAAS,WAAQN,EAAKf,OAAO,OAA3D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,GAAG,WAAWC,QAAS,WAAQN,EAAKU,iBAAiB,OAAnF,KACAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,MAAMC,QAAS,WAAQN,EAAKf,OAAO,OAA3D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,MAAMC,QAAS,WAAQN,EAAKf,OAAO,OAA3D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,QAAQC,QAAS,WAAQN,EAAKf,OAAO,OAA7D,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,GAAG,MAAMC,QAAS,WAAQN,EAAKU,iBAAiB,OAA9E,KACAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,OAAOC,QAAS,WAAQN,EAAKf,OAAO,OAAjE,KACAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,UAAUC,QAAS,WAAQN,EAAKW,QAAxD,KACAV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,GAAG,SAASC,QAAS,WAAQN,EAAKU,iBAAiB,OAAjF,cAvGuBE,aCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ddd4354.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\n\nconst initialState = {\n  value: null,\n  displayValue: '',\n  operator: null,\n  waitingForOperand: false\n};\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = initialState;\n  }\n\n  clear() {\n    this.setState({\n      displayValue: ''\n    });\n  }\n  sign() {\n    this.state.displayValue.charAt(0) === '-' ? this.setState({ displayValue: this.state.displayValue.slice(1) }) : this.setState({ displayValue: `-${this.state.displayValue}` });\n  }\n  percent() {\n    this.setState({ displayValue: `${parseFloat(this.state.displayValue) / 100}` })\n  }\n  append(number) {\n    const { displayValue, waitingForOperand } = this.state\n    if (waitingForOperand) {\n      this.setState({\n        displayValue: number,\n        waitingForOperand: false\n      })\n    } else {\n      this.setState({\n        displayValue: displayValue === '0' ? number : displayValue + number\n      })\n    }\n  }\n  dot() {\n    const { waitingForOperand } = this.state\n    if (waitingForOperand) {\n\n    }\n    if (this.state.displayValue === '') {\n      this.append('0.');\n    }\n    else if (this.state.displayValue.indexOf('.') === -1) {\n      this.append('.');\n      this.setState({ waitingForOperand: false })\n    }\n  }\n  setPrevious() {\n    this.setState({\n      previous: this.state.displayValue,\n      operatorClicked: true\n    });\n  }\n\n  performOperation(nextOperator) {\n    const { displayValue, operator, value } = this.state\n    const nextValue = parseFloat(displayValue);\n\n    const operations = {\n      '/': (prevValue, nextValue) => prevValue / nextValue,\n      '*': (prevValue, nextValue) => prevValue * nextValue,\n      '-': (prevValue, nextValue) => prevValue - nextValue,\n      '+': (prevValue, nextValue) => prevValue + nextValue,\n      '=': (prevValue, nextValue) => nextValue\n    }\n\n    if (value == null) {\n      this.setState({\n        value: nextValue\n      })\n    } else if (operator) {\n      const currentValue = value || 0\n      const computedValue = operations[operator](currentValue, nextValue);\n\n      this.setState({\n        value: computedValue,\n        displayValue: String(computedValue)\n      })\n    }\n    this.setState({\n      waitingForOperand: true,\n      operator: nextOperator\n    })\n  }\n  render() {\n    return (\n      <section>\n        <div className=\"calculator\">\n          <div id=\"display\">{this.state.displayValue === '' ? 0 : this.state.displayValue}</div>\n          <div className=\"btn top-row\" id=\"clear\" onClick={() => { this.clear() }}>C</div>\n          <div className=\"btn top-row\" onClick={() => { this.sign() }}>+/-</div>\n          <div className=\"btn top-row\" onClick={() => { this.percent() }}>%</div>\n          <div className=\"btn operator\" id=\"divide\" onClick={() => { this.performOperation('/') }}>รท</div>\n          <div className=\"btn\" id=\"seven\" onClick={() => { this.append('7') }}>7</div>\n          <div className=\"btn\" id=\"eight\" onClick={() => { this.append('8') }}>8</div>\n          <div className=\"btn\" id=\"nine\" onClick={() => { this.append('9') }}>9</div>\n          <div className=\"btn operator\" id=\"multiply\" onClick={() => { this.performOperation('*') }}>x</div>\n          <div className=\"btn\" id=\"four\" onClick={() => { this.append('4') }}>4</div>\n          <div className=\"btn\" id=\"five\" onClick={() => { this.append('5') }}>5</div>\n          <div className=\"btn\" id=\"six\" onClick={() => { this.append('6') }}>6</div>\n          <div className=\"btn operator\" id=\"subtract\" onClick={() => { this.performOperation('-') }}>-</div>\n          <div className=\"btn\" id=\"one\" onClick={() => { this.append('1') }}>1</div>\n          <div className=\"btn\" id=\"two\" onClick={() => { this.append('2') }}>2</div>\n          <div className=\"btn\" id=\"three\" onClick={() => { this.append('3') }}>3</div>\n          <div className=\"btn operator\" id=\"add\" onClick={() => { this.performOperation('+') }}>+</div>\n          <div className=\"zero btn\" id=\"zero\" onClick={() => { this.append('0') }}>0</div>\n          <div className=\"btn\" id=\"decimal\" onClick={() => { this.dot() }}>.</div>\n          <div className=\"btn operator\" id=\"equals\" onClick={() => { this.performOperation('=') }}>=</div>\n        </div>\n      </section>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}